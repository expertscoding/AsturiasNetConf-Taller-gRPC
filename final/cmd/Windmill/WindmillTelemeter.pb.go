// Code generated by protoc-gen-go. DO NOT EDIT.
// source: WindmillTelemeter.proto

package Windmill

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WindmillInfoRequest struct {
	WindmillId           string   `protobuf:"bytes,1,opt,name=WindmillId,proto3" json:"WindmillId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WindmillInfoRequest) Reset()         { *m = WindmillInfoRequest{} }
func (m *WindmillInfoRequest) String() string { return proto.CompactTextString(m) }
func (*WindmillInfoRequest) ProtoMessage()    {}
func (*WindmillInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74cc501b68c8c7e7, []int{0}
}

func (m *WindmillInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WindmillInfoRequest.Unmarshal(m, b)
}
func (m *WindmillInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WindmillInfoRequest.Marshal(b, m, deterministic)
}
func (m *WindmillInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WindmillInfoRequest.Merge(m, src)
}
func (m *WindmillInfoRequest) XXX_Size() int {
	return xxx_messageInfo_WindmillInfoRequest.Size(m)
}
func (m *WindmillInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WindmillInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WindmillInfoRequest proto.InternalMessageInfo

func (m *WindmillInfoRequest) GetWindmillId() string {
	if m != nil {
		return m.WindmillId
	}
	return ""
}

// The response message containing actual values about the windmill.
type WindmillTelemetryResponse struct {
	WindmillId           string        `protobuf:"bytes,1,opt,name=WindmillId,proto3" json:"WindmillId,omitempty"`
	EventTime            string        `protobuf:"bytes,2,opt,name=EventTime,proto3" json:"EventTime,omitempty"`
	WindSpeed            float64       `protobuf:"fixed64,3,opt,name=WindSpeed,proto3" json:"WindSpeed,omitempty"`
	RPM                  int32         `protobuf:"varint,4,opt,name=RPM,proto3" json:"RPM,omitempty"`
	WindDirection        WindDirection `protobuf:"varint,5,opt,name=WindDirection,proto3,enum=Windmill.WindDirection" json:"WindDirection,omitempty"`
	PowerOutput          float64       `protobuf:"fixed64,6,opt,name=PowerOutput,proto3" json:"PowerOutput,omitempty"`
	VoltageOutput        float64       `protobuf:"fixed64,7,opt,name=VoltageOutput,proto3" json:"VoltageOutput,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *WindmillTelemetryResponse) Reset()         { *m = WindmillTelemetryResponse{} }
func (m *WindmillTelemetryResponse) String() string { return proto.CompactTextString(m) }
func (*WindmillTelemetryResponse) ProtoMessage()    {}
func (*WindmillTelemetryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74cc501b68c8c7e7, []int{1}
}

func (m *WindmillTelemetryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WindmillTelemetryResponse.Unmarshal(m, b)
}
func (m *WindmillTelemetryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WindmillTelemetryResponse.Marshal(b, m, deterministic)
}
func (m *WindmillTelemetryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WindmillTelemetryResponse.Merge(m, src)
}
func (m *WindmillTelemetryResponse) XXX_Size() int {
	return xxx_messageInfo_WindmillTelemetryResponse.Size(m)
}
func (m *WindmillTelemetryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WindmillTelemetryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WindmillTelemetryResponse proto.InternalMessageInfo

func (m *WindmillTelemetryResponse) GetWindmillId() string {
	if m != nil {
		return m.WindmillId
	}
	return ""
}

func (m *WindmillTelemetryResponse) GetEventTime() string {
	if m != nil {
		return m.EventTime
	}
	return ""
}

func (m *WindmillTelemetryResponse) GetWindSpeed() float64 {
	if m != nil {
		return m.WindSpeed
	}
	return 0
}

func (m *WindmillTelemetryResponse) GetRPM() int32 {
	if m != nil {
		return m.RPM
	}
	return 0
}

func (m *WindmillTelemetryResponse) GetWindDirection() WindDirection {
	if m != nil {
		return m.WindDirection
	}
	return WindDirection_N
}

func (m *WindmillTelemetryResponse) GetPowerOutput() float64 {
	if m != nil {
		return m.PowerOutput
	}
	return 0
}

func (m *WindmillTelemetryResponse) GetVoltageOutput() float64 {
	if m != nil {
		return m.VoltageOutput
	}
	return 0
}

func init() {
	proto.RegisterType((*WindmillInfoRequest)(nil), "Windmill.WindmillInfoRequest")
	proto.RegisterType((*WindmillTelemetryResponse)(nil), "Windmill.WindmillTelemetryResponse")
}

func init() { proto.RegisterFile("WindmillTelemeter.proto", fileDescriptor_74cc501b68c8c7e7) }

var fileDescriptor_74cc501b68c8c7e7 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0xc7, 0x49, 0xe7, 0xa6, 0xfd, 0xe6, 0x64, 0x46, 0x70, 0x71, 0xa8, 0x94, 0xe9, 0xa1, 0xa7,
	0x22, 0x13, 0x8f, 0x5e, 0xc4, 0x1d, 0x3c, 0x0c, 0x47, 0x5a, 0xb6, 0x9b, 0x30, 0xed, 0xa7, 0x14,
	0xda, 0xa4, 0xa6, 0xe9, 0xc4, 0xb7, 0xf0, 0x39, 0x7c, 0x15, 0x5f, 0x4a, 0x5a, 0xd7, 0x6d, 0x6d,
	0x0f, 0x5e, 0x76, 0x0b, 0xbf, 0xdf, 0x3f, 0xdf, 0x17, 0xfe, 0x04, 0x7a, 0xb3, 0x40, 0xf8, 0x51,
	0x10, 0x86, 0x1e, 0x86, 0x18, 0xa1, 0x46, 0xe5, 0xc4, 0x4a, 0x6a, 0x49, 0xf7, 0x0a, 0xd1, 0x6f,
	0x8f, 0x44, 0x1a, 0x25, 0x7f, 0x78, 0x70, 0x03, 0x47, 0x85, 0x78, 0x10, 0xaf, 0x92, 0xe3, 0x7b,
	0x8a, 0x89, 0xa6, 0xe7, 0x00, 0x2b, 0xec, 0x33, 0x62, 0x11, 0xdb, 0xe4, 0x1b, 0x64, 0xf0, 0x65,
	0xc0, 0x49, 0x65, 0x93, 0xfa, 0xe4, 0x98, 0xc4, 0x52, 0x24, 0xf8, 0xdf, 0x6d, 0x7a, 0x0a, 0xe6,
	0x68, 0x81, 0x42, 0x7b, 0x41, 0x84, 0xcc, 0xc8, 0xf5, 0x1a, 0x64, 0x36, 0xcb, 0xba, 0x31, 0xa2,
	0xcf, 0x1a, 0x16, 0xb1, 0x09, 0x5f, 0x03, 0xda, 0x85, 0x06, 0x9f, 0x8c, 0xd9, 0x8e, 0x45, 0xec,
	0x26, 0xcf, 0x8e, 0xf4, 0x16, 0x3a, 0x99, 0xbe, 0x0f, 0x14, 0xbe, 0xe8, 0x40, 0x0a, 0xd6, 0xb4,
	0x88, 0x7d, 0x30, 0xec, 0x39, 0xc5, 0x46, 0xa7, 0xa4, 0x79, 0x39, 0x4d, 0x2d, 0x68, 0x4f, 0xe4,
	0x07, 0xaa, 0xc7, 0x54, 0xc7, 0xa9, 0x66, 0xad, 0x7c, 0xe1, 0x26, 0xa2, 0x97, 0xd0, 0x99, 0xca,
	0x50, 0xcf, 0xdf, 0x70, 0x99, 0xd9, 0xcd, 0x33, 0x65, 0x38, 0xfc, 0x21, 0x70, 0x58, 0x2b, 0x9f,
	0x4e, 0xa1, 0xbb, 0xec, 0x74, 0x55, 0x13, 0x3d, 0x2b, 0xbf, 0xac, 0xd2, 0x7d, 0xff, 0xa2, 0xae,
	0xeb, 0x15, 0x3f, 0xc1, 0x71, 0x75, 0xae, 0xab, 0x15, 0xce, 0xa3, 0x6d, 0x4c, 0xbf, 0x22, 0x77,
	0xfb, 0xdf, 0x86, 0x39, 0x1b, 0x7b, 0x2e, 0xaa, 0x05, 0xaa, 0xe7, 0x56, 0xfe, 0x59, 0xae, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x60, 0xb4, 0xb7, 0x5e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WindmillTelemeterClient is the client API for WindmillTelemeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WindmillTelemeterClient interface {
	// Sends Telemetry.
	RequestTelemetry(ctx context.Context, in *WindmillInfoRequest, opts ...grpc.CallOption) (*WindmillTelemetryResponse, error)
	RequestTelemetryStream(ctx context.Context, in *WindmillInfoRequest, opts ...grpc.CallOption) (WindmillTelemeter_RequestTelemetryStreamClient, error)
}

type windmillTelemeterClient struct {
	cc grpc.ClientConnInterface
}

func NewWindmillTelemeterClient(cc grpc.ClientConnInterface) WindmillTelemeterClient {
	return &windmillTelemeterClient{cc}
}

func (c *windmillTelemeterClient) RequestTelemetry(ctx context.Context, in *WindmillInfoRequest, opts ...grpc.CallOption) (*WindmillTelemetryResponse, error) {
	out := new(WindmillTelemetryResponse)
	err := c.cc.Invoke(ctx, "/Windmill.WindmillTelemeter/RequestTelemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *windmillTelemeterClient) RequestTelemetryStream(ctx context.Context, in *WindmillInfoRequest, opts ...grpc.CallOption) (WindmillTelemeter_RequestTelemetryStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WindmillTelemeter_serviceDesc.Streams[0], "/Windmill.WindmillTelemeter/RequestTelemetryStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &windmillTelemeterRequestTelemetryStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WindmillTelemeter_RequestTelemetryStreamClient interface {
	Recv() (*WindmillTelemetryResponse, error)
	grpc.ClientStream
}

type windmillTelemeterRequestTelemetryStreamClient struct {
	grpc.ClientStream
}

func (x *windmillTelemeterRequestTelemetryStreamClient) Recv() (*WindmillTelemetryResponse, error) {
	m := new(WindmillTelemetryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WindmillTelemeterServer is the server API for WindmillTelemeter service.
type WindmillTelemeterServer interface {
	// Sends Telemetry.
	RequestTelemetry(context.Context, *WindmillInfoRequest) (*WindmillTelemetryResponse, error)
	RequestTelemetryStream(*WindmillInfoRequest, WindmillTelemeter_RequestTelemetryStreamServer) error
}

// UnimplementedWindmillTelemeterServer can be embedded to have forward compatible implementations.
type UnimplementedWindmillTelemeterServer struct {
}

func (*UnimplementedWindmillTelemeterServer) RequestTelemetry(ctx context.Context, req *WindmillInfoRequest) (*WindmillTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestTelemetry not implemented")
}
func (*UnimplementedWindmillTelemeterServer) RequestTelemetryStream(req *WindmillInfoRequest, srv WindmillTelemeter_RequestTelemetryStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestTelemetryStream not implemented")
}

func RegisterWindmillTelemeterServer(s *grpc.Server, srv WindmillTelemeterServer) {
	s.RegisterService(&_WindmillTelemeter_serviceDesc, srv)
}

func _WindmillTelemeter_RequestTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WindmillInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WindmillTelemeterServer).RequestTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Windmill.WindmillTelemeter/RequestTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WindmillTelemeterServer).RequestTelemetry(ctx, req.(*WindmillInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WindmillTelemeter_RequestTelemetryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WindmillInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WindmillTelemeterServer).RequestTelemetryStream(m, &windmillTelemeterRequestTelemetryStreamServer{stream})
}

type WindmillTelemeter_RequestTelemetryStreamServer interface {
	Send(*WindmillTelemetryResponse) error
	grpc.ServerStream
}

type windmillTelemeterRequestTelemetryStreamServer struct {
	grpc.ServerStream
}

func (x *windmillTelemeterRequestTelemetryStreamServer) Send(m *WindmillTelemetryResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _WindmillTelemeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Windmill.WindmillTelemeter",
	HandlerType: (*WindmillTelemeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestTelemetry",
			Handler:    _WindmillTelemeter_RequestTelemetry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestTelemetryStream",
			Handler:       _WindmillTelemeter_RequestTelemetryStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "WindmillTelemeter.proto",
}
